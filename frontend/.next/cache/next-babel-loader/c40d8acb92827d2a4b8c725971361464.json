{"ast":null,"code":"import _slicedToArray from \"C:/Users/adudi/[nextjs]NargoreShop/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"C:/Users/adudi/[nextjs]NargoreShop/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\adudi\\\\[nextjs]NargoreShop\\\\frontend\\\\components\\\\UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UPDATE_PRODUCT_MUTATION(\\n        $id: ID!\\n        $name: String\\n        $description: String\\n        $price: Int\\n    ){\\n        UpdateProduct(\\n            id: $id,\\n            data: {\\n                id: $id,\\n                name: $name,\\n                description: $description,\\n                price: $price,\\n            }\\n        ){\\n            id\\n            name\\n            description\\n            price\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query SINGLE_PRODUCT_QUERY($id: ID!){\\n        Product(where: {id: $id}){\\n            id\\n            name\\n            description\\n            price\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nvar SINGLE_PRODUCT_QUERY = gql(_templateObject());\nvar UPDATE_PRODUCT_MUTATION = gql(_templateObject2());\nexport default function UpdateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  // 1. Получить сущевствующий товар\n  var _useQuery = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading; // 2. Получить зависимость для обновления товара\n\n\n  var _useMutation = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id: id\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateProduct = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      updateData = _useMutation2$.data,\n      updateError = _useMutation2$.error,\n      updateLoading = _useMutation2$.loading; // 3. Нужно форму, что отслеживает обновления товара\n\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Update \", id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 12\n  }, this);\n}\n\n_s(UpdateProduct, \"dNIYSjKX3qpe++IUISBM8iIOLro=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = UpdateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProduct\");","map":{"version":3,"sources":["C:/Users/adudi/[nextjs]NargoreShop/frontend/components/UpdateProduct.js"],"names":["useMutation","useQuery","gql","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","variables","data","error","loading","updateProduct","updateData","updateError","updateLoading"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,oBAAoB,GAAGD,GAAH,mBAA1B;AAUA,IAAME,uBAAuB,GAAGF,GAAH,oBAA7B;AAwBA,eAAe,SAASG,aAAT,OAA6B;AAAA;;AAAA,MAALC,EAAK,QAALA,EAAK;;AACxC;AADwC,kBAEPL,QAAQ,CAACE,oBAAD,EAAuB;AAC5DI,IAAAA,SAAS,EAAE;AAACD,MAAAA,EAAE,EAAFA;AAAD;AADiD,GAAvB,CAFD;AAAA,MAEhCE,IAFgC,aAEhCA,IAFgC;AAAA,MAE1BC,KAF0B,aAE1BA,KAF0B;AAAA,MAEnBC,OAFmB,aAEnBA,OAFmB,EAMxC;;;AANwC,qBAOgDV,WAAW,CAACI,uBAAD,EAA0B;AACzHG,IAAAA,SAAS,EAAE;AACPD,MAAAA,EAAE,EAAFA;AADO;AAD8G,GAA1B,CAP3D;AAAA;AAAA,MAOjCK,aAPiC;AAAA;AAAA,MAOXC,UAPW,kBAOjBJ,IAPiB;AAAA,MAOQK,WAPR,kBAOCJ,KAPD;AAAA,MAO8BK,aAP9B,kBAOqBJ,OAPrB,EAYxC;;;AACA,sBAAO;AAAA,0BAAWJ,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;GAduBD,a;UAEaJ,Q,EAKuDD,W;;;KAPpEK,a","sourcesContent":["import { useMutation, useQuery } from \"@apollo/client\"\r\nimport gql from \"graphql-tag\"\r\n\r\nconst SINGLE_PRODUCT_QUERY = gql`\r\n    query SINGLE_PRODUCT_QUERY($id: ID!){\r\n        Product(where: {id: $id}){\r\n            id\r\n            name\r\n            description\r\n            price\r\n        }\r\n    }\r\n`\r\nconst UPDATE_PRODUCT_MUTATION = gql`\r\n    mutation UPDATE_PRODUCT_MUTATION(\r\n        $id: ID!\r\n        $name: String\r\n        $description: String\r\n        $price: Int\r\n    ){\r\n        UpdateProduct(\r\n            id: $id,\r\n            data: {\r\n                id: $id,\r\n                name: $name,\r\n                description: $description,\r\n                price: $price,\r\n            }\r\n        ){\r\n            id\r\n            name\r\n            description\r\n            price\r\n        }\r\n    }\r\n`\r\n\r\nexport default function UpdateProduct({id}) {\r\n    // 1. Получить сущевствующий товар\r\n    const { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\r\n        variables: {id},\r\n    })\r\n\r\n    // 2. Получить зависимость для обновления товара\r\n    const [updateProduct, {data: updateData, error: updateError, loading: updateLoading}] = useMutation(UPDATE_PRODUCT_MUTATION, {\r\n        variables: {\r\n            id\r\n        }\r\n    })\r\n    // 3. Нужно форму, что отслеживает обновления товара\r\n    return <p>Update {id}</p>\r\n}"]},"metadata":{},"sourceType":"module"}