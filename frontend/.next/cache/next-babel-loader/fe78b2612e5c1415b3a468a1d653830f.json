{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\adudi\\\\[nextjs]NargoreShop\\\\frontend\\\\components\\\\UpdateProduct.js\";\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id: ID!){\n        Product(where: {id: $id}){\n            id\n            name\n            description\n            price\n        }\n    }\n`;\nexport default function UpdateProduct({\n  id\n}) {\n  // 1. Получить сущевствующий товар\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id\n    }\n  }); // 2. Получить зависимость для обновления товара\n  // 3. Нужно форму, что отслеживает обновления товара\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Update \", id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 12\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/adudi/[nextjs]NargoreShop/frontend/components/UpdateProduct.js"],"names":["useQuery","gql","SINGLE_PRODUCT_QUERY","UpdateProduct","id","data","error","loading","variables"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,oBAAoB,GAAGD,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAWA,eAAe,SAASE,aAAT,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAA6B;AACxC;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BP,QAAQ,CAACE,oBAAD,EAAuB;AAC5DM,IAAAA,SAAS,EAAE;AAACJ,MAAAA;AAAD;AADiD,GAAvB,CAAzC,CAFwC,CAKxC;AACA;;AACA,sBAAO;AAAA,0BAAWA,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH","sourcesContent":["import { useQuery } from \"@apollo/client\"\r\nimport gql from \"graphql-tag\"\r\n\r\nconst SINGLE_PRODUCT_QUERY = gql`\r\n    query SINGLE_PRODUCT_QUERY($id: ID!){\r\n        Product(where: {id: $id}){\r\n            id\r\n            name\r\n            description\r\n            price\r\n        }\r\n    }\r\n`\r\n\r\nexport default function UpdateProduct({id}) {\r\n    // 1. Получить сущевствующий товар\r\n    const { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\r\n        variables: {id},\r\n    })\r\n    // 2. Получить зависимость для обновления товара\r\n    // 3. Нужно форму, что отслеживает обновления товара\r\n    return <p>Update {id}</p>\r\n}"]},"metadata":{},"sourceType":"module"}