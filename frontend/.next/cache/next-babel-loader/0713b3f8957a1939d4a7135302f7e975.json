{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from \"react\";\nexport default function useForm(initial = {}) {\n  //create a state object for our inputs\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n  const initialValues = Object.values(initial);\n  console.log({\n    initialValues\n  });\n  useEffect(() => {\n    setInputs(initial);\n  }, [initialValues]);\n\n  function handleChange(e) {\n    let {\n      value,\n      name,\n      type\n    } = e.target;\n\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    if (type === 'file') {\n      [value] = e.target.files;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, '']));\n    setInputs(blankState);\n  }\n\n  return {\n    inputs,\n    handleChange,\n    clearForm,\n    resetForm\n  };\n}","map":{"version":3,"sources":["C:/Users/adudi/[nextjs]NargoreShop/frontend/lib/useForm.js"],"names":["useState","useEffect","useForm","initial","inputs","setInputs","initialValues","Object","values","console","log","handleChange","e","value","name","type","target","parseInt","files","resetForm","clearForm","blankState","fromEntries","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,OAAT,CAAkBC,OAAO,GAAG,EAA5B,EAAgC;AAC3C;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBL,QAAQ,CAACG,OAAD,CAApC;AACA,QAAMG,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAcL,OAAd,CAAtB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACJ,IAAAA;AAAD,GAAZ;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,SAAS,CAACF,OAAD,CAAT;AACH,GAFQ,EAEN,CAACG,aAAD,CAFM,CAAT;;AAIA,WAASK,YAAT,CAAsBC,CAAtB,EAAwB;AACpB,QAAI;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAwBH,CAAC,CAACI,MAA9B;;AACA,QAAGD,IAAI,KAAK,QAAZ,EAAsB;AAClBF,MAAAA,KAAK,GAAEI,QAAQ,CAACJ,KAAD,CAAf;AACH;;AACD,QAAIE,IAAI,KAAK,MAAb,EAAqB;AACjB,OAACF,KAAD,IAAUD,CAAC,CAACI,MAAF,CAASE,KAAnB;AACH;;AACDb,IAAAA,SAAS,iCACFD,MADE;AAEL,OAACU,IAAD,GAAQD;AAFH,OAAT;AAIH;;AAED,WAASM,SAAT,GAAoB;AAChBd,IAAAA,SAAS,CAACF,OAAD,CAAT;AACH;;AAED,WAASiB,SAAT,GAAoB;AAChB,UAAMC,UAAU,GAAGd,MAAM,CAACe,WAAP,CAAmBf,MAAM,CAACgB,OAAP,CAAenB,MAAf,EAAuBoB,GAAvB,CAA4B,CAAC,CAACC,GAAD,EAAMZ,KAAN,CAAD,KAAkB,CAACY,GAAD,EAAM,EAAN,CAA9C,CAAnB,CAAnB;AACApB,IAAAA,SAAS,CAACgB,UAAD,CAAT;AACH;;AAED,SAAO;AACHjB,IAAAA,MADG;AAEHO,IAAAA,YAFG;AAGHS,IAAAA,SAHG;AAIHD,IAAAA;AAJG,GAAP;AAMH","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport default function useForm( initial = {}) {\r\n    //create a state object for our inputs\r\n    const [inputs, setInputs] = useState(initial)\r\n    const initialValues = Object.values(initial)\r\n    console.log({initialValues});\r\n\r\n    useEffect(() => {\r\n        setInputs(initial)\r\n    }, [initialValues])\r\n\r\n    function handleChange(e){\r\n        let { value, name, type } = e.target\r\n        if(type === 'number') {\r\n            value= parseInt(value)\r\n        }\r\n        if( type === 'file' ){\r\n            [value] = e.target.files\r\n        }\r\n        setInputs({\r\n            ...inputs,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    function resetForm(){\r\n        setInputs(initial)\r\n    }\r\n\r\n    function clearForm(){\r\n        const blankState = Object.fromEntries(Object.entries(inputs).map( ([key, value]) => [key, ''] ))\r\n        setInputs(blankState)\r\n    }\r\n\r\n    return {\r\n        inputs,\r\n        handleChange,\r\n        clearForm,\r\n        resetForm\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}