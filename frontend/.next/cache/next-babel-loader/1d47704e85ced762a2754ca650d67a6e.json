{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      const {\n        skip,\n        first\n      } = args;\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      console.log({\n        existing,\n        args,\n        cache\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / frist + 1;\n      const pages = Math.ceil(count / first);\n      const items = existing.slice(skip, skip + first).filter(x => x);\n\n      if (items.length !== first) {\n        return false;\n      }\n\n      if (items.length) {\n        console.log(`There are ${items.length} items in the cache`);\n        return items;\n      }\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      console.log(`Mergin items from the network ${incoming.length}`);\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/Users/adudi/[nextjs]NargoreShop/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","console","log","count","_allProductsMeta","page","frist","pages","Math","ceil","items","slice","filter","x","length","merge","incoming"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA0B;AACrC,SAAO;AACHC,IAAAA,OAAO,EAAE,KADN;;AAGHC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAgC;AAAA;;AAChC,YAAM;AAACC,QAAAA,IAAD;AAAOC,QAAAA;AAAP,UAAgBH,IAAtB;AACA,YAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACT,QAAAA,QAAD;AAAWC,QAAAA,IAAX;AAAiBC,QAAAA;AAAjB,OAAZ;AACA,YAAMQ,KAAK,GAAGL,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEM,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGT,IAAI,GAAGU,KAAP,GAAe,CAA5B;AACA,YAAMC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUN,KAAK,GAAGN,KAAlB,CAAd;AACA,YAAMa,KAAK,GAAGjB,QAAQ,CAACkB,KAAT,CAAef,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCe,MAAnC,CAA2CC,CAAC,IAAIA,CAAhD,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBjB,KAArB,EAA2B;AAEvB,eAAO,KAAP;AACH;;AAED,UAAGa,KAAK,CAACI,MAAT,EAAgB;AACZb,QAAAA,OAAO,CAACC,GAAR,CAAa,aAAYQ,KAAK,CAACI,MAAO,qBAAtC;AACA,eAAOJ,KAAP;AACH;AACJ,KApBE;;AAqBHK,IAAAA,KAAK,CAACtB,QAAD,EAAWuB,QAAX,EAAqB;AAAEtB,MAAAA;AAAF,KAArB,EAA8B;AAC/BO,MAAAA,OAAO,CAACC,GAAR,CAAa,iCAAgCc,QAAQ,CAACF,MAAO,EAA7D;AAEH;;AAxBE,GAAP;AA0BH","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination'\r\n\r\nexport default function paginationField(){\r\n    return {\r\n        keyArgs: false,\r\n\r\n        read(existing = [], { args, cache }){\r\n            const {skip, first} = args;\r\n            const data = cache.readQuery({ query: PAGINATION_QUERY })\r\n            console.log({existing, args, cache})\r\n            const count = data?._allProductsMeta?.count;\r\n            const page = skip / frist + 1\r\n            const pages = Math.ceil(count / first)\r\n            const items = existing.slice(skip, skip + first).filter( x => x)\r\n            if (items.length !== first){\r\n\r\n                return false\r\n            }\r\n\r\n            if(items.length){\r\n                console.log(`There are ${items.length} items in the cache`)\r\n                return items\r\n            }\r\n        },\r\n        merge(existing, incoming, { args }){\r\n            console.log(`Mergin items from the network ${incoming.length}`)\r\n\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}